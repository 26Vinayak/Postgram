{"version":3,"sources":["reportWebVitals.js","utils/hooks.js","context/auth.js","Pages/Login.js","Pages/Register.js","components/LikeButton.js","components/DeletButton.js","components/PostCard.js","Pages/Home.js","components/MenuBar.js","utils/authRoute.js","Pages/SinglePost.js","App.js","ApolloServer.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useForm","callback","initialState","useState","values","setValues","onChange","e","target","name","value","onSubmit","preventDefault","user","localStorage","getItem","decodedtoken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userdata","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","setItem","token","LOGIN_USER","gql","Login","context","useContext","errors","setErrors","loginUser","username","password","useMutation","update","_","result","data","history","push","onError","err","graphQLErrors","extensions","exception","variables","loading","className","Form","noValidate","Input","label","placeholder","error","Button","primary","Object","keys","length","map","REGISTER_USER","Register","addUser","email","confirmPassword","userData","register","console","log","LIKE_POST_MUTATION","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","postId","likePost","likeButton","color","Icon","Popup","content","inverted","trigger","basic","as","Link","to","labelPosition","onClick","Label","pointing","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","FETCH_POSTS_QUERY","DeletButton","commentId","confirmOpen","setconfirmOpen","mutation","proxy","readQuery","query","getPosts","filter","p","writeQuery","deletePost","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","size","src","Header","Meta","moment","fromNow","Description","extra","CREATE_POST_MUTATION","Home","useQuery","posts","createPost","Grid","columns","Row","Column","Field","marginBottom","message","Segment","raised","Placeholder","image","Line","Paragraph","Transition","Group","MenuBar","pathname","window","location","path","substr","activeItem","setactiveItem","handleItemClick","Menu","secondary","Item","active","position","AuthRoute","Component","component","rest","render","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","match","params","coment","setComent","submitComment","getPost","comments","width","float","class","disabled","trim","comment","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById"],"mappings":"oJAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2FCJDQ,EAAU,SAACC,GAA4B,IAAnBC,EAAkB,uDAAL,GAC1C,EAA2BC,mBAASD,GAApC,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAW,SAACC,GACdF,EAAU,2BAAID,GAAL,kBAAaG,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,UAG5CC,EAAW,SAACJ,GACdA,EAAEK,iBACFX,KAIJ,MAAO,CACHK,WACAK,WACAP,W,gBCfFF,EAAe,CACjBW,KAAK,MAGT,GAAGC,aAAaC,QAAQ,YAAY,CAChC,IAAMC,EAAeC,YAAUH,aAAaC,QAAQ,aAChC,IAAjBC,EAAaE,IAASC,KAAKC,MAC1BN,aAAaO,WAAW,YAGxBnB,EAAaW,KAAOG,EAI5B,I,EAAMM,EAAcC,wBAAc,CAC9BV,KAAK,KACLW,MAAO,SAACC,KACRC,OAAQ,eAKZ,SAASC,EAAYC,EAAMC,GACvB,OAAOA,EAAOC,MACV,IAAK,QACD,OAAO,2BACAF,GADP,IAEIf,KAAKgB,EAAOE,UAEpB,IAAK,SACD,kCACOH,GADP,IAEIf,KAAK,OAGb,QACI,OAAOe,GAMnB,SAASI,EAAaC,GAClB,MAAyBC,qBAAWP,EAAYzB,GAAhD,mBAAO0B,EAAP,KAAaO,EAAb,KAkBA,OACI,cAACb,EAAYc,SAAb,aACI1B,MAAS,CAACG,KAAKe,EAAMf,KAAKW,MAlBlC,SAAeC,GAEXX,aAAauB,QAAQ,WAAWZ,EAASa,OACzCH,EAAS,CACLL,KAAK,QACLC,QAAQN,KAawBC,OAVxC,WACIZ,aAAaO,WAAW,YACxBc,EAAS,CACLL,KAAK,cAQDG,ICOhB,I,EAAMM,EAAaC,YAAH,gOAYDC,EA/Ef,SAAeR,GACX,IAAMS,EAAUC,qBAAWrB,GAC3B,EAA4BnB,mBAAS,IAArC,mBAAOyC,EAAP,KAAeC,EAAf,KAEA,EAAuC7C,GAiBvC,WACI8C,MAlB8D,CAChEC,SAAU,GACVC,SAAU,KAFJ1C,EAAR,EAAQA,SAAUK,EAAlB,EAAkBA,SAAUP,EAA5B,EAA4BA,OAK5B,EAAiC6C,YAAYV,EAAY,CACrDW,OADqD,SAC9CC,EAAEC,GAAS,IAAD,EAEbV,EAAQlB,MAAR,OAAc4B,QAAd,IAAcA,GAAd,UAAcA,EAAQC,YAAtB,aAAc,EAAc7B,OAC9BS,EAAMqB,QAAQC,KAAK,MAErBC,QANqD,SAM7CC,GACNZ,EAAUY,EAAIC,cAAc,GAAGC,WAAWC,UAAUhB,SAEtDiB,UAAWzD,IATf,mBAAO0C,EAAP,KAAoBgB,EAApB,KAAoBA,QAkBpB,OACI,sBAAKC,UAAY,iBAAjB,UACI,eAACC,EAAA,EAAD,CAAMrD,SAAYA,EAAUsD,YAAU,EAAEF,UAAaD,EAAQ,UAAU,GAAvE,UACI,uCACA,cAACE,EAAA,EAAKE,MAAN,CACIpC,KAAO,OACPqC,MAAQ,WACRC,YAAY,cACZ3D,KAAO,WACPC,MAASN,EAAO2C,SAChBsB,QAASzB,EAAOG,SAChBzC,SAAYA,IAEhB,cAAC0D,EAAA,EAAKE,MAAN,CACIC,MAAQ,WACRC,YAAY,cACZ3D,KAAO,WACPqB,KAAO,WACPuC,QAASzB,EAAOI,SAChBtC,MAASN,EAAO4C,SAChB1C,SAAYA,IAEhB,cAACgE,EAAA,EAAD,CAAQxC,KAAO,SAASyC,SAAO,EAA/B,sBAIHC,OAAOC,KAAK7B,GAAQ8B,OAAO,GACxB,qBAAKX,UAAY,mBAAjB,SACI,oBAAIA,UAAY,OAAhB,SACKS,OAAOpE,OAAOwC,GAAQ+B,KAAI,SAAAjE,GAAK,OAC5B,6BAAmBA,GAARA,cCuBvC,I,EAAMkE,EAAgBpC,YAAH,ogBAwBJqC,EAxGf,SAAkB5C,GACd,MAA2B9B,mBAAS,IAApC,mBAAOyC,EAAP,KAAcC,EAAd,KACMH,EAAUC,qBAAWrB,GAC3B,EAAmCtB,GAiBnC,WACI8E,MAlBoD,CACpD/B,SAAS,GACTgC,MAAM,GACN/B,SAAS,GACTgC,gBAAgB,KAJb1E,EAAP,EAAOA,SAASK,EAAhB,EAAgBA,SAASP,EAAzB,EAAyBA,OAMzB,EAA4B6C,YAAY2B,EAAc,CAClD1B,OADkD,SAC3CC,EAD2C,GACb,IAAZ8B,EAAW,EAA1B5B,KAAM6B,SACZC,QAAQC,IAAIH,GACZvC,EAAQlB,MAAMyD,GACdhD,EAAMqB,QAAQC,KAAK,MAEvBC,QANkD,SAM1CC,GACJZ,EAAUY,EAAIC,cAAc,GAAGC,WAAWC,UAAUhB,SAExDiB,UAAUzD,IATd,mBAAO0E,EAAP,KAAgBhB,EAAhB,KAAgBA,QAchB,OACI,sBAAKC,UAAY,iBAAjB,UACI,eAACC,EAAA,EAAD,CAAMrD,SAAYA,EAAUsD,YAAU,EAAEF,UAAaD,EAAQ,UAAU,GAAvE,UACI,0CACA,cAACE,EAAA,EAAKE,MAAN,CACIpC,KAAO,OACPqC,MAAQ,WACRC,YAAY,cACZ3D,KAAO,WACPC,MAASN,EAAO2C,SAChBsB,QAASzB,EAAOG,SAChBzC,SAAYA,IAEhB,cAAC0D,EAAA,EAAKE,MAAN,CACIpC,KAAO,QACPqC,MAAQ,QACRC,YAAY,WACZ3D,KAAO,QACP4D,QAASzB,EAAOmC,MAChBrE,MAASN,EAAO2E,MAChBzE,SAAYA,IACd,cAAC0D,EAAA,EAAKE,MAAN,CACEC,MAAQ,WACRC,YAAY,cACZ3D,KAAO,WACPqB,KAAO,WACPuC,QAASzB,EAAOI,SAChBtC,MAASN,EAAO4C,SAChB1C,SAAYA,IACd,cAAC0D,EAAA,EAAKE,MAAN,CACEpC,KAAO,WACPqC,MAAQ,mBACRC,YAAY,sBACZC,QAASzB,EAAOoC,gBAChBvE,KAAO,kBACPC,MAASN,EAAO4E,gBAChB1E,SAAYA,IAEhB,cAACgE,EAAA,EAAD,CAAQxC,KAAO,SAASyC,SAAO,EAA/B,yBAIHC,OAAOC,KAAK7B,GAAQ8B,OAAO,GACxB,qBAAKX,UAAY,mBAAjB,SACI,oBAAIA,UAAY,OAAhB,SACKS,OAAOpE,OAAOwC,GAAQ+B,KAAI,SAAAjE,GAAK,OAC5B,6BAAmBA,GAARA,c,6HCfvC,I,MAAM2E,EAAqB7C,YAAH,+LAcT8C,EApEf,YAAuD,IAAD,IAAjCC,KAAMC,EAA2B,EAA3BA,GAAGC,EAAwB,EAAxBA,UAAUC,EAAc,EAAdA,MAAO7E,EAAO,EAAPA,KAC3C,EAA2BV,mBAAS,IAApC,mBAAc0C,GAAd,WACA,EAAyB1C,oBAAS,GAAlC,mBAAOwF,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACFhF,GAAQ6E,EAAMI,MAAK,SAACC,GAAD,OAAUA,EAAKhD,WAAalC,EAAKkC,YACtD6C,GAAS,GACJA,GAAS,KACf,CAAC/E,EAAM6E,IAGZ,MAAmBzC,YAAYoC,EAAmB,CAC9CxB,UAAU,CAACmC,OAAOR,GAClBhC,QAF8C,SAEtCC,GACJZ,EAAUY,EAAIC,cAAc,GAAGC,WAAWC,UAAUhB,WAHrDqD,EAAP,oBAMOC,EAAarF,EAChB8E,EACA,cAACrB,EAAA,EAAD,CAAQ6B,MAAM,OAAd,SACQ,cAACC,EAAA,EAAD,CAAM3F,KAAK,YAGf,cAAC4F,EAAA,EAAD,CAAOC,QAAU,eACfC,UAAQ,EACRC,QACE,cAAClC,EAAA,EAAD,CAAQ6B,MAAM,OAAOM,OAAK,EAA1B,SACE,cAACL,EAAA,EAAD,CAAM3F,KAAK,cAMnB,cAAC4F,EAAA,EAAD,CAAOC,QAAU,eACfC,UAAQ,EACRC,QACE,cAAClC,EAAA,EAAD,CAAQoC,GAAIC,IAAMC,GAAG,SAAST,MAAM,OAAOM,OAAK,EAAhD,SACC,cAACL,EAAA,EAAD,CAAM3F,KAAK,cAKtB,OACI,eAAC6D,EAAA,EAAD,CAAQoC,GAAG,MAAMG,cAAc,QAAQC,QAAWb,EAAlD,UACOC,EACD,cAACa,EAAA,EAAD,CAAOL,GAAG,IAAID,OAAK,EAACN,MAAM,OAAOa,SAAS,OAA1C,SACGvB,Q,SCDjB,IAAMwB,EAAuBzE,YAAH,8GAKpB0E,EAA2B1E,YAAJ,6VAkBvB2E,EAAoB3E,YAAH,mZAsBR4E,EA5Ff,YAAmD,IAA7BpB,EAA4B,EAA5BA,OAAO/F,EAAqB,EAArBA,SAASoH,EAAY,EAAZA,UAClC,EAAqClH,oBAAS,GAA9C,mBAAOmH,EAAP,KAAmBC,EAAnB,KACMC,EAAYH,EAAUH,EAAwBD,EAEpD,EAAqBhE,YAAYuE,EAAS,CACtCtE,OADsC,SAC/BuE,GAGH,GAFAF,GAAe,IAEXF,EAAU,CACV,IAAMhE,EAAOoE,EAAMC,UAAU,CACzBC,MAAMR,IAEV9D,EAAKuE,SAAWvE,EAAKuE,SAASC,QAAO,SAACC,GAAD,OAAOA,EAAEtC,KAAOQ,KACrDyB,EAAMM,WAAW,CAACJ,MAAMR,EAAkB9D,SAE3CpD,GACCA,KAGR4D,UAAU,CACNmC,SACAqB,eAjBDW,EAAP,oBAoBA,OACI,qCACI,cAAC3B,EAAA,EAAD,CACIC,QAASe,EAAU,iBAAiB,cACpCd,UAAQ,EACRC,QACI,cAAClC,EAAA,EAAD,CAAQoC,GAAK,MAAMP,MAAQ,MACnB8B,QAAQ,QACRnB,QAAW,kBAAKS,GAAe,IAFvC,SAGI,cAACnB,EAAA,EAAD,CAAM3F,KAAM,QAAQyH,MAAS,CAACC,OAAO,SAGjD,cAACC,EAAA,EAAD,CACIC,KAAMf,EACNgB,SAAU,kBAAMf,GAAe,IAC/BgB,UAAWP,QCQZQ,I,MAAAA,GA1Cf,YAAqF,IAAD,IAAjEjD,KAAMkD,EAA2D,EAA3DA,KAAKC,EAAsD,EAAtDA,UAAUlD,EAA4C,EAA5CA,GAAGzC,EAAyC,EAAzCA,SAAS0C,EAAgC,EAAhCA,UAAUC,EAAsB,EAAtBA,MAAMiD,EAAgB,EAAhBA,aAE3D9H,EAAQ8B,qBAAWrB,GAAnBT,KACP,OACM,eAAC+H,EAAA,EAAD,CAAMC,OAAK,EAAX,UACA,eAACD,EAAA,EAAKE,QAAN,WACE,cAACC,EAAA,EAAD,CACEd,QAAQ,QACRe,KAAK,OACLC,IAAI,gEAEN,cAACL,EAAA,EAAKM,OAAN,UAAcnG,IACd,cAAC6F,EAAA,EAAKO,KAAN,CAAWzC,GAAMC,IAAMC,GAAE,iBAAYpB,GAArC,SAA4C4D,IAAOV,GAAWW,SAAQ,KACtE,cAACT,EAAA,EAAKU,YAAN,UACGb,OAGL,eAACG,EAAA,EAAKE,QAAN,CAAcS,OAAK,EAAnB,UAEI,cAAC,EAAD,CAAY1I,KAAQA,EAAM0E,KAAM,CAACC,KAAGE,QAAMD,eAC1C,cAACY,EAAA,EAAD,CACEC,QAAQ,kBACRC,UAAQ,EACRC,QACI,eAAClC,EAAA,EAAD,CAAQuC,cAAc,QAAQH,GAAMC,IAAMC,GAAE,iBAAcpB,GAA1D,UACE,cAAClB,EAAA,EAAD,CAAQ6B,MAAM,OAAOM,OAAK,EAA1B,SACE,cAACL,EAAA,EAAD,CAAM3F,KAAK,eAEb,cAACsG,EAAA,EAAD,CAAOL,GAAG,IAAID,OAAK,EAACN,MAAM,OAAOa,SAAS,OAA1C,SACG2B,SAKV9H,GAAQkC,IAAgB,OAAJlC,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,YAAWA,GACpC,cAAC,EAAD,CAAciD,OAASR,WCoFrC,IAAM2B,GAAoB3E,YAAH,qZAsBjBgH,GAAuBhH,YAAH,2eAuBXiH,GAvKf,WAAiB,IAAD,EACL5I,EAAQ8B,qBAAWrB,GAAnBT,KAEP,EAGI6I,YAASvC,IAFTrD,EADJ,EACIA,QACAT,EAFJ,EAEIA,KAEAsG,EAAK,OAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAMuE,SAClB,EAAmC5H,GAkBnC,WACI4J,MAnB0D,CAC1DnB,KAAK,KADFrI,EAAP,EAAOA,OAAOE,EAAd,EAAcA,SAASK,EAAvB,EAAuBA,SAKvB,EAAgCsC,YAAYuG,GAAsB,CAC9D3F,UAAWzD,EACX8C,OAF8D,SAEvDuE,EAAOrE,GAEZ,IAAMC,EAAOoE,EAAMC,UAAU,CAC3BC,MAAOR,KAET9D,EAAKuE,SAAL,CAAiBxE,EAAOC,KAAKuG,YAA7B,mBAA4CvG,EAAKuE,WACjDH,EAAMM,WAAW,CAAEJ,MAAOR,GAAmB9D,SAC7CsG,EAAK,OAAGtG,QAAH,IAAGA,OAAH,EAAGA,EAAMuE,SACdxH,EAAOqI,KAAO,MAVpB,mBAAOmB,EAAP,KAAqBvF,EAArB,KAAqBA,MAgBrB,OACI,eAACwF,EAAA,EAAD,CAAMC,QAAS,EAAf,UACI,cAACD,EAAA,EAAKE,IAAN,CAAUhG,UAAY,aAAtB,SACI,gDAEJ,eAAC8F,EAAA,EAAKE,IAAN,WACKlJ,GACG,eAACgJ,EAAA,EAAKG,OAAN,WACI,eAAChG,EAAA,EAAD,CAAMrD,SAAYA,EAAlB,UACI,gDACA,eAACqD,EAAA,EAAKiG,MAAN,WACI,cAACjG,EAAA,EAAKE,MAAN,CACIE,YAAc,YACd3D,KAAK,OACLH,SAAYA,EACZI,MAAON,EAAOqI,KACdpE,QAASA,IAEZjE,EAAOqI,KAAK/D,OAAO,GAAK,cAACJ,EAAA,EAAD,CAAQxC,KAAO,SAASqE,MAAQ,OAAhC,0BAMhC9B,GACG,qBAAKN,UAAY,mBAAmBmE,MAAS,CAACgC,aAAa,IAA3D,SACI,oBAAInG,UAAY,OAAhB,SACI,6BAAKM,EAAMX,cAAc,GAAGyG,iBAM/CrG,EACG,qCACI,cAAC+F,EAAA,EAAKG,OAAN,UACI,cAACI,EAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,EAAA,EAAD,WACA,eAACA,EAAA,EAAYpB,OAAb,CAAoBqB,OAAK,EAAzB,UACI,cAACD,EAAA,EAAYE,KAAb,IACA,cAACF,EAAA,EAAYE,KAAb,OAEJ,eAACF,EAAA,EAAYG,UAAb,WACI,cAACH,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,WACzB,cAAC4F,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,oBAMjC,cAACmF,EAAA,EAAKG,OAAN,UACA,cAACI,EAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,EAAA,EAAD,WACA,eAACA,EAAA,EAAYpB,OAAb,CAAoBqB,OAAK,EAAzB,UACI,cAACD,EAAA,EAAYE,KAAb,IACA,cAACF,EAAA,EAAYE,KAAb,OAEJ,eAACF,EAAA,EAAYG,UAAb,WACI,cAACH,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,WACzB,cAAC4F,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,oBAMjC,cAACmF,EAAA,EAAKG,OAAN,UACA,cAACI,EAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,EAAA,EAAD,WACA,eAACA,EAAA,EAAYpB,OAAb,CAAoBqB,OAAK,EAAzB,UACI,cAACD,EAAA,EAAYE,KAAb,IACA,cAACF,EAAA,EAAYE,KAAb,OAEJ,eAACF,EAAA,EAAYG,UAAb,WACI,cAACH,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,WACzB,cAAC4F,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,uBAO7C,cAACgG,EAAA,EAAWC,MAAZ,UACMhB,IAAK,UAAIA,SAAJ,aAAI,EAAOhF,KAAI,SAACY,GACf,OAAQ,cAACsE,EAAA,EAAKG,OAAN,CAAa9B,MAAO,CAACgC,aAAa,IAAlC,SAAuD,cAAC,GAAD,CAAU3E,KAAQA,KAA3BA,EAAKC,iB,6BC1DxEoF,I,MAAAA,GAxDf,WACE,MAAsBjI,qBAAWrB,GAA1BT,EAAP,EAAOA,KAAKa,EAAZ,EAAYA,OACNmJ,EAAWC,OAAOC,SAASF,SAC3BG,EAAmB,MAAZH,EAAiB,OAASA,EAASI,OAAO,GAEvD,EAAmC9K,mBAAS6K,GAA5C,mBAAOE,EAAP,KAAkBC,EAAlB,KACQC,EAAkB,SAAC7K,EAAD,GAAa,IAATE,EAAQ,EAARA,KACxB0K,EAAc1K,IA+ClB,OA7CgBI,EACd,eAACwK,GAAA,EAAD,CAAMrE,UAAQ,EAACsE,WAAS,EAACtC,KAAO,UAAU7C,MAAO,OAAjD,UACI,cAACkF,GAAA,EAAKE,KAAN,CACE9K,KAAMI,EAAKkC,SACXyI,QAAM,EACN9E,GAAMC,IACNC,GAAK,MAEP,cAACyE,GAAA,EAAKA,KAAN,CAAWI,SAAS,QAApB,SACE,cAACJ,GAAA,EAAKE,KAAN,CACI9K,KAAK,SACLqG,QAASpF,SAMnB,eAAC2J,GAAA,EAAD,CAAMrE,UAAQ,EAACsE,WAAS,EAACtC,KAAO,UAAU7C,MAAO,OAAjD,UACE,cAACkF,GAAA,EAAKE,KAAN,CAEE9K,KAAK,OACL+K,OAAuB,SAAfN,EACRpE,QAASsE,EACT1E,GAAMC,IACNC,GAAK,MAEP,eAACyE,GAAA,EAAKA,KAAN,CAAWI,SAAS,QAApB,UACE,cAACJ,GAAA,EAAKE,KAAN,CACI9K,KAAK,QACL+K,OAAuB,UAAfN,EACRpE,QAASsE,EACT1E,GAAMC,IACNC,GAAK,WAET,cAACyE,GAAA,EAAKE,KAAN,CACE9K,KAAK,WACL+K,OAAuB,aAAfN,EACRpE,QAASsE,EACT1E,GAAMC,IACNC,GAAK,qB,UClCF8E,GAXG,SAAC,GAAiC,IAAtBC,EAAqB,EAA/BC,UAAuBC,EAAQ,8BACxChL,EAAQ8B,qBAAWrB,GAAnBT,KACP,OACI,cAAC,KAAD,2BACQgL,GADR,IAEIC,OAAQ,SAAA7J,GAAK,OAAIpB,EAAO,cAAC,KAAD,CAAU+F,GAAG,MAAM,cAAC+E,EAAD,eAAe1J,SCuItE,IAAM8J,GAA2BvJ,YAAJ,8TAiBvBwJ,GAAmBxJ,YAAH,6aAsBPyJ,GAlLf,SAAoBhK,GAChB,IAwBIiK,EAxBGrL,EAAQ8B,qBAAWrB,GAAnBT,KACDmF,EAAU/D,EAAMkK,MAAMC,OAAOpG,OAG5B3C,EAAQqG,YAASsC,GAAiB,CACrCnI,UAAU,CACNmC,YAFD3C,KAKP,EAA2BlD,mBAAS,IAApC,mBAAOkM,EAAP,KAAcC,EAAd,KAEA,EAAwBrJ,YAAY8I,GAAwB,CACxD7I,OADwD,WAEpDoJ,EAAU,KAEdzI,UAAU,CACNmC,SACAyC,KAAK4D,KANNE,EAAP,oBAYMC,EAAO,OAAGnJ,QAAH,IAAGA,OAAH,EAAGA,EAAMmJ,QAEtB,GAAIA,EAgBA,CACA,IAAOhH,EACkCgH,EADlChH,GAAGiD,EAC+B+D,EAD/B/D,KAAKC,EAC0B8D,EAD1B9D,UAAU3F,EACgByJ,EADhBzJ,SACzB0J,EAAyCD,EAAzCC,SAAS/G,EAAgC8G,EAAhC9G,MAAMD,EAA0B+G,EAA1B/G,UAAUkD,EAAgB6D,EAAhB7D,aACzBuD,EACI,cAACrC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKE,IAAN,WACI,cAACF,EAAA,EAAKG,OAAN,CAAa0C,MAAS,EAAtB,SACI,cAAC3D,EAAA,EAAD,CACIE,IAAI,8DACJD,KAAK,QACL2D,MAAQ,YAGhB,eAAC9C,EAAA,EAAKG,OAAN,CAAa0C,MAAS,GAAtB,UACI,eAAC9D,EAAA,EAAD,CAAMC,OAAK,EAAX,UACI,eAACD,EAAA,EAAKE,QAAN,WACI,cAACF,EAAA,EAAKM,OAAN,UACKnG,IAEL,cAAC6F,EAAA,EAAKO,KAAN,UACKC,IAAOV,GAAWW,YAEvB,cAACT,EAAA,EAAKU,YAAN,UACKb,OAGT,uBACA,eAACG,EAAA,EAAKE,QAAN,CAAcS,OAAK,EAAnB,UACI,cAAC,EAAD,CAAY1I,KAAMA,EAAM0E,KAAM,CAACC,KAAGE,QAAMD,eACxC,cAACY,EAAA,EAAD,CAAOC,QAAU,kBACbC,UAAQ,EACRC,QACA,eAAClC,EAAA,EAAD,CAAQoC,GAAI,MAAMG,cAAc,QAC/BC,QAAW,kBAAK3B,QAAQC,IAAI,oBAD7B,UAIA,cAACd,EAAA,EAAD,CAAQmC,OAAK,EAACN,MAAQ,OAAtB,SACI,cAACC,EAAA,EAAD,CAAM3F,KAAO,eAEjB,cAACsG,EAAA,EAAD,CAAON,OAAK,EAACN,MAAM,OAAOa,SAAS,OAAnC,SACK2B,SAMR9H,GAAQkC,IAAgB,OAAJlC,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,YAAWA,GAClC,cAAC,EAAD,CAAaiD,OAAUR,EAAIvF,SApE3D,WACIgC,EAAMqB,QAAQC,KAAK,cAuEF1C,GACG,cAAC+H,EAAA,EAAD,CAAMC,OAAK,EAAX,SACI,eAACD,EAAA,EAAKE,QAAN,WACI,kDACA,cAAC9E,EAAA,EAAD,UACI,sBAAK4I,MAAQ,wBAAb,UACI,uBAAO9K,KAAM,OACTsC,YAAY,YACZ3D,KAAK,UACLC,MAAS2L,EACT/L,SAAY,SAAAC,GAAC,OAAI+L,EAAU/L,EAAEC,OAAOE,UAExC,wBAAQoB,KAAO,SAASiC,UAAY,iBAChC8I,SAA8B,KAAlBR,EAAOS,OACnBhG,QAAWyF,EAFf,SAGC,wBAAQrE,MAAS,CAAC/B,MAAM,SAAxB,gCAMpBsG,EAAS9H,KAAI,SAACoI,GACX,OAAO,cAACnE,EAAA,EAAD,CAAMC,OAAK,EAAX,SACH,eAACD,EAAA,EAAKE,QAAN,WACKjI,GAAQA,EAAKkC,WAAagK,EAAQhK,UAC/B,cAAC,EAAD,CAAaiD,OAASR,EAAI6B,UAAa0F,EAAQvH,KAEnD,cAACoD,EAAA,EAAKM,OAAN,UAAc6D,EAAQhK,WACtB,cAAC6F,EAAA,EAAKO,KAAN,UAAYC,IAAO2D,EAAQrE,WAAWW,YACtC,cAACT,EAAA,EAAKU,YAAN,UAAmByD,EAAQtE,4BA/FvDyD,EAAgB,cAACrC,EAAA,EAAKG,OAAN,UACI,cAACI,EAAA,EAAD,CAASC,QAAM,EAAf,SACI,eAACC,EAAA,EAAD,WACI,eAACA,EAAA,EAAYpB,OAAb,CAAoBqB,OAAK,EAAzB,UACA,cAACD,EAAA,EAAYE,KAAb,IACA,cAACF,EAAA,EAAYE,KAAb,OAEA,eAACF,EAAA,EAAYG,UAAb,WACA,cAACH,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,WACzB,cAAC4F,EAAA,EAAYE,KAAb,CAAkB9F,OAAO,oBAmGzD,OAAOwH,GCpHIc,OAhBf,WACE,OACE,cAAChL,EAAD,UACM,cAAC,IAAD,UACI,eAACiL,GAAA,EAAD,WACE,cAAC,GAAD,IACA,cAAC,KAAD,CAAOC,OAAK,EAAElC,KAAO,IAAIY,UAAanC,KACtC,cAAC,GAAD,CAAWyD,OAAK,EAAElC,KAAO,SAASY,UAAanJ,IAC/C,cAAC,GAAD,CAAWyK,OAAK,EAAElC,KAAM,YAAYY,UAAa/G,IACjD,cAAC,KAAD,CAAOqI,OAAK,EAAClC,KAAK,iBAAiBY,UAAaK,a,kDCV1DkB,GAAWC,aAAe,CAC5BC,IAAI,uCAGFC,GAAWC,cAAW,WACxB,IAAMjL,EAAQxB,aAAaC,QAAQ,YAEnC,OADAoE,QAAQC,IAAI9C,GACL,CACHkL,QAAQ,CACJC,cAAenL,EAAD,iBAAkBA,GAAS,QAK/CoL,GAAS,IAAIC,KAAa,CAC5BC,KAAKN,GAASO,OAAOV,IACrBW,MAAO,IAAIC,OAMX,iBAACC,GAAA,EAAD,CAAgBN,OAAWA,GAA3B,SACI,cAAC,GAAD,MC9BRO,IAASnC,OAAOkC,GAAeE,SAASC,eAAe,SAKvD5O,M","file":"static/js/main.a4b593b1.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useState} from 'react';\n\n\nexport const useForm = (callback,initialState={})=>{\n    const [values,setValues] = useState(initialState);\n    const onChange = (e)=>{\n        setValues({...values,[e.target.name]:e.target.value});\n    };\n\n    const onSubmit = (e)=>{\n        e.preventDefault();\n        callback();\n    };\n\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}","import React,{useReducer,createContext} from 'react';\nimport jwtDecode from 'jwt-decode';\n\nconst initialState = {\n    user:null\n}\n\nif(localStorage.getItem('jwtToken')){\n    const decodedtoken = jwtDecode(localStorage.getItem('jwtToken'));\n    if(decodedtoken.exp*1000<Date.now()){\n        localStorage.removeItem('jwtToken');\n    }\n    else{\n        initialState.user = decodedtoken;\n    }\n}\n\nconst AuthContext = createContext({ \n    user:null,\n    login: (userdata)=>{},\n    logout: ()=>{}\n});\n\n\n\nfunction authReducer(state,action){\n    switch(action.type){\n        case 'LOGIN':\n            return {\n                ...state,\n                user:action.payload\n            }\n        case 'LOGOUT':{\n            return{\n                ...state,\n                user:null\n            }\n        }\n        default:\n            return state;\n    }\n}\n\n\n\nfunction AuthProvider(props){\n    const [state,dispatch] = useReducer(authReducer,initialState);\n\n    function login(userdata){\n     //   console.log(userdata);\n        localStorage.setItem('jwtToken',userdata.token);\n        dispatch({\n            type:'LOGIN',\n            payload:userdata\n        });\n    }\n    function logout(){\n        localStorage.removeItem('jwtToken');\n        dispatch({\n            type:'LOGOUT'\n        });\n    }\n\n\n    return (\n        <AuthContext.Provider\n            value = {{user:state.user,login,logout}}\n            {...props}\n        />\n    )\n}\n\n\n\nexport {AuthContext,AuthProvider};","import React, {useContext, useState } from 'react'\nimport {Button, Form} from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport {useMutation} from '@apollo/react-hooks';\nimport {useForm} from '../utils/hooks';\nimport { AuthContext } from '../context/auth';\n\nfunction Login(props) {\n    const context = useContext(AuthContext);\n    const [errors, setErrors] = useState({});\n\n    const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n      username: '',\n      password: ''\n    });\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n        update(_,result) {\n        //  console.log(result.data?.login);\n            context.login(result?.data?.login);\n          props.history.push('/');\n        },\n        onError(err) {\n          setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables: values\n    });\n    \n    function loginUserCallback() {\n        loginUser();\n    }\n\n    \n\n    return (\n        <div className = \"form-container\">\n            <Form onSubmit = {onSubmit} noValidate  className = {loading?\"loading\":''}>\n                <h1>Login</h1>\n                <Form.Input\n                    type = \"text\"\n                    label = \"Username\"\n                    placeholder=\"Username...\"\n                    name = \"username\"\n                    value = {values.username}\n                    error = {errors.username?true:false}\n                    onChange = {onChange}\n                />\n                <Form.Input\n                    label = \"Password\"\n                    placeholder=\"Password...\"\n                    name = \"password\"\n                    type = \"password\"\n                    error = {errors.password?true:false}\n                    value = {values.password}\n                    onChange = {onChange}\n                />     \n                <Button type = 'submit' primary>\n                    Login\n                </Button>\n            </Form>\n            {Object.keys(errors).length>0 && (\n                <div className = \"ui error message\">\n                    <ul className = \"list\">\n                        {Object.values(errors).map(value =>(\n                            <li key = {value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n\n            )}\n        </div>\n    );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from 'react'\nimport {Button, Form} from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport {useMutation} from '@apollo/react-hooks';\nimport {useForm} from '../utils/hooks';\nimport { AuthContext } from '../context/auth';\n\nfunction Register(props) {\n    const [errors,setErrors] = useState({});\n    const context = useContext(AuthContext);\n    const {onChange,onSubmit,values} = useForm(registerUser,{\n        username:'',\n        email:'',\n        password:'',\n        confirmPassword:''     \n    });\n    const [addUser,{loading}] = useMutation(REGISTER_USER,{\n        update(_,{data:{register:userData}}){\n            console.log(userData);\n            context.login(userData);\n            props.history.push('/');\n        },\n        onError(err){\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        },\n        variables:values\n    });\n    function registerUser(){\n        addUser();\n    }\n    return (\n        <div className = \"form-container\">\n            <Form onSubmit = {onSubmit} noValidate  className = {loading?\"loading\":''}>\n                <h1>Register</h1>\n                <Form.Input\n                    type = \"text\"\n                    label = \"Username\"\n                    placeholder=\"Username...\"\n                    name = \"username\"\n                    value = {values.username}\n                    error = {errors.username?true:false}\n                    onChange = {onChange}\n                />\n                <Form.Input\n                    type = \"email\"\n                    label = \"Email\"\n                    placeholder=\"Email...\"\n                    name = \"email\"\n                    error = {errors.email?true:false}\n                    value = {values.email}\n                    onChange = {onChange}\n                /><Form.Input\n                    label = \"Password\"\n                    placeholder=\"Password...\"\n                    name = \"password\"\n                    type = \"password\"\n                    error = {errors.password?true:false}\n                    value = {values.password}\n                    onChange = {onChange}\n                /><Form.Input\n                    type = \"password\"\n                    label = \"Confirm Password\"\n                    placeholder=\"Confirm Password...\"\n                    error = {errors.confirmPassword?true:false}\n                    name = \"confirmPassword\"\n                    value = {values.confirmPassword}\n                    onChange = {onChange}\n                />\n                <Button type = 'submit' primary>\n                    Register\n                </Button>\n            </Form>\n            {Object.keys(errors).length>0 && (\n                <div className = \"ui error message\">\n                    <ul className = \"list\">\n                        {Object.values(errors).map(value =>(\n                            <li key = {value}>{value}</li>\n                        ))}\n                    </ul>\n                </div>\n\n            )}\n        </div>\n    );\n}\n\n\nconst REGISTER_USER = gql`\n    mutation register(\n        $username:String!\n        $email:String!\n        $password:String!\n        $confirmPassword:String!\n    ){\n        register(\n            registerInput:{\n                username:$username\n                email:$email\n                password:$password\n                confirmPassword:$confirmPassword\n            }\n        ){\n            id\n            email\n            username\n            createdAt\n            token\n        }\n    }\n`;\n\nexport default Register;\n","import React, { useEffect, useState } from 'react'\nimport { Button, Icon, Label, Popup } from 'semantic-ui-react'\nimport gql from 'graphql-tag';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\n\nfunction LikeButton({post:{id,likeCount,likes},user}) {    \n    const [error, setErrors] = useState('');\n    const [liked,setLiked] = useState(false);\n\n    useEffect(() => {\n        if (user && likes.find((like) => like.username === user.username)) {\n          setLiked(true);\n        } else setLiked(false);\n      }, [user, likes]);\n\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION,{\n        variables:{postId:id},\n        onError(err) {\n            setErrors(err.graphQLErrors[0].extensions.exception.errors);\n        }\n    });\n     const likeButton = user ? (\n        liked ? (\n        <Button color=\"pink\">\n                <Icon name=\"heart\" />\n            </Button>\n            ) : (\n            <Popup content = \"Like on post\"\n              inverted\n              trigger = {\n                <Button color=\"pink\" basic>\n                  <Icon name=\"heart\" />\n                </Button>\n              } \n            />  \n            )\n        ) : (\n          <Popup content = \"Like on post\"\n            inverted\n            trigger = {\n              <Button as={Link} to=\"/login\" color=\"pink\" basic>\n               <Icon name=\"heart\" />\n             </Button>\n            }\n          />\n        );\n    return (\n        <Button as='div' labelPosition='right' onClick = {likePost}>\n              {likeButton}\n              <Label as='a' basic color='pink' pointing='left'>\n                {likeCount}\n              </Label>\n        </Button>\n    )\n}\n\n\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\n\nexport default LikeButton\n","import React, { useState } from 'react'\nimport { Button, Confirm, Icon, Popup } from 'semantic-ui-react'\nimport gql from 'graphql-tag';\nimport {useMutation} from '@apollo/react-hooks';\n\nfunction DeletButton({postId,callback,commentId}) {\n    const [confirmOpen,setconfirmOpen] = useState(false);\n    const mutation  = commentId?DELETE_COMMENT_MUTATION:DELETE_POST_MUTATION;\n\n    const [deletePost] = useMutation(mutation,{\n        update(proxy){\n            setconfirmOpen(false);\n            // remove post from cache\n            if(!commentId){\n                const data = proxy.readQuery({\n                    query:FETCH_POSTS_QUERY\n                });\n                data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n                proxy.writeQuery({query:FETCH_POSTS_QUERY,data});    \n            }     \n            if(callback){\n                callback();\n            }\n        },   \n        variables:{\n            postId,\n            commentId\n        }\n    });\n    return (\n        <>\n            <Popup\n                content={commentId?\"Delete comment\":'Delete post'}\n                inverted\n                trigger = {\n                    <Button as = \"div\" color = \"red\"\n                            floated=\"right\"\n                            onClick = {()=> setconfirmOpen(true)}>\n                        <Icon name =\"trash\" style = {{margin:0}}/>\n                    </Button>}\n            />\n            <Confirm\n                open={confirmOpen}\n                onCancel={() => setconfirmOpen(false)}\n                onConfirm={deletePost}\n            />\n        </>\n    )\n}\n\n\n\nconst DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId:ID!){\n        deletePost(postId:$postId)\n    }\n`;\nconst DELETE_COMMENT_MUTATION  = gql`\n    mutation deleteComment($postId:ID! , $commentId:ID!)\n    {\n        deleteComment(postId:$postId , commentId:$commentId){\n            id\n            comments{\n                id\n                username\n                createdAt\n                body\n            }\n            commentCount\n        }\n    }\n`;\n\n\n\nconst FETCH_POSTS_QUERY = gql`\n    {\n        getPosts{ \n            id \n            body \n            createdAt \n            username \n            likeCount\n            likes{\n                username \n            }\n            commentCount\n            comments{\n                id \n                username \n                createdAt \n                body\n            }\n        }\n    }\n`;\n\nexport default DeletButton;\n","/* eslint-disable react/jsx-no-duplicate-props */\nimport React, { useContext } from 'react'\nimport {Card,Image, Popup} from 'semantic-ui-react';\nimport {Link} from  'react-router-dom';\nimport moment from 'moment'; \nimport { Button, Icon, Label } from 'semantic-ui-react'\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeletButton';\n\nfunction PostCard({post:{body,createdAt,id,username,likeCount,likes,commentCount}}) {\n\n  const {user} = useContext(AuthContext);\n  return (\n        <Card fluid>\n        <Card.Content>\n          <Image\n            floated='right'\n            size='mini'\n            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\n          />\n          <Card.Header>{username}</Card.Header>\n          <Card.Meta as = {Link} to={`/posts/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\n          <Card.Description>\n            {body}\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n            \n            <LikeButton user = {user} post={{id,likes,likeCount}}/>\n            <Popup\n              content=\"Comment on Post\"\n              inverted\n              trigger ={\n                  <Button labelPosition='right' as = {Link} to = {`/posts/${id}`}>\n                    <Button color='teal' basic>\n                      <Icon name='comments' />\n                    </Button>\n                    <Label as='a' basic color='blue' pointing='left'>\n                      {commentCount}\n                    </Label>\n                  </Button>\n              }\n            />\n            {user && username && user?.username===username && (\n              <DeleteButton postId ={id}/>\n            )} \n      </Card.Content>\n      </Card>\n    )\n}\n\nexport default PostCard;\n","import React, { useContext} from 'react'\nimport {useMutation, useQuery} from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport {Button, Form, Grid,Placeholder,Segment,Transition} from 'semantic-ui-react';\nimport PostCard from '../components/PostCard';\nimport { AuthContext } from '../context/auth';\nimport { useForm } from '../utils/hooks';\nfunction Home() {\n    const {user} = useContext(AuthContext);\n    \n    const {\n        loading,\n        data\n    } = useQuery(FETCH_POSTS_QUERY);\n    let posts = data?.getPosts;\n    const {values,onChange,onSubmit} = useForm(createPostCallback,{\n        body:''\n    });\n\n    // eslint-disable-next-line no-unused-vars\n    const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables: values,\n        update(proxy, result) {\n          // fetching the data from  \n          const data = proxy.readQuery({\n            query: FETCH_POSTS_QUERY\n          });\n          data.getPosts = [result.data.createPost, ...data.getPosts];\n          proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n          posts = data?.getPosts;\n          values.body = '';\n        } \n    });\n    function createPostCallback(){\n        createPost();\n    }\n    return (\n        <Grid columns={3}>\n            <Grid.Row className = \"page-title\">\n                <h1>Recent Posts</h1>\n            </Grid.Row>\n            <Grid.Row>\n                {user && (\n                    <Grid.Column>\n                        <Form onSubmit = {onSubmit}>\n                            <h2>Create a post:</h2>\n                            <Form.Field>\n                                <Form.Input\n                                    placeholder = \"Hi World!\"\n                                    name=\"body\"\n                                    onChange = {onChange}\n                                    value={values.body}\n                                    error = {error?true:false}\n                                />\n                                {values.body.length>0 && <Button type = \"submit\" color = \"teal\">\n                                    Submit\n                                </Button>\n                                }\n                            </Form.Field>\n                        </Form>\n                        {error && (\n                            <div className = \"ui error message\" style = {{marginBottom:20}}>\n                                <ul className = \"list\">\n                                    <li>{error.graphQLErrors[0].message}</li>\n                                </ul>\n                            </div>\n                        )}\n                    </Grid.Column>\n                )}\n                {loading?(\n                    <>\n                        <Grid.Column>\n                            <Segment raised>\n                                <Placeholder>\n                                <Placeholder.Header image>\n                                    <Placeholder.Line />\n                                    <Placeholder.Line />\n                                </Placeholder.Header>\n                                <Placeholder.Paragraph>\n                                    <Placeholder.Line length='medium' />\n                                    <Placeholder.Line length='short' />\n                                </Placeholder.Paragraph>\n                                </Placeholder>\n                            </Segment>\n                        </Grid.Column>\n\n                            <Grid.Column>\n                            <Segment raised>\n                                <Placeholder>\n                                <Placeholder.Header image>\n                                    <Placeholder.Line />\n                                    <Placeholder.Line />\n                                </Placeholder.Header>\n                                <Placeholder.Paragraph>\n                                    <Placeholder.Line length='medium' />\n                                    <Placeholder.Line length='short' />\n                                </Placeholder.Paragraph>\n                                </Placeholder>\n                            </Segment>\n                            </Grid.Column>\n\n                            <Grid.Column>\n                            <Segment raised>\n                                <Placeholder>\n                                <Placeholder.Header image>\n                                    <Placeholder.Line />\n                                    <Placeholder.Line />\n                                </Placeholder.Header>\n                                <Placeholder.Paragraph>\n                                    <Placeholder.Line length='medium' />\n                                    <Placeholder.Line length='short' />\n                                </Placeholder.Paragraph>\n                                </Placeholder>\n                            </Segment>\n                        </Grid.Column>\n                    </>\n                ):\n                <Transition.Group>\n                    {(posts && posts?.map((post) => {   \n                            return (<Grid.Column style={{marginBottom:20}} key = {post.id}><PostCard post = {post}/></Grid.Column>);\n                    }))}\n                </Transition.Group>}\n            </Grid.Row>\n        </Grid>\n    );\n}\n\n\n\nconst FETCH_POSTS_QUERY = gql`\n    {\n        getPosts{ \n            id \n            body \n            createdAt \n            username \n            likeCount\n            likes{\n                username \n            }\n            commentCount\n            comments{\n                id \n                username \n                createdAt \n                body\n            }\n        }\n    }\n`;\n\nconst CREATE_POST_MUTATION = gql`\n    mutation createPost($body:String!){\n        createPost(body:$body){\n            id\n            body\n            createdAt\n            username\n            likes{\n                id\n                username\n                createdAt\n            }\n            likeCount\n            comments{\n                id\n                body\n                username\n                createdAt\n            }\n            commentCount\n        }\n    }\n`;\nexport default Home;\n","import React,{useContext, useState} from 'react'\nimport {Menu} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport { AuthContext } from '../context/auth';\n\nfunction MenuBar() {\n  const {user,logout} = useContext(AuthContext);\n  const pathname = window.location.pathname;\n  const path = pathname ==='/'? 'home' : pathname.substr(1);\n\n  const [activeItem,setactiveItem] = useState(path);\n    const handleItemClick = (e,{name})=>{\n        setactiveItem(name);\n    }\n    const Menubar = user?(\n      <Menu pointing secondary size = 'massive' color ='pink'>\n          <Menu.Item\n            name={user.username}\n            active\n            as = {Link}\n            to = '/'\n          />          \n          <Menu.Menu position='right'>\n            <Menu.Item\n                name='logout'\n                onClick={logout}\n            />              \n            \n          </Menu.Menu>\n      </Menu>\n    ):(\n      <Menu pointing secondary size = 'massive' color ='blue'>\n        <Menu.Item \n          \n          name='home'\n          active={activeItem === 'home'}\n          onClick={handleItemClick}\n          as = {Link}\n          to = '/'\n        />          \n        <Menu.Menu position='right'>\n          <Menu.Item\n              name='login'\n              active={activeItem === 'login'}\n              onClick={handleItemClick}\n              as = {Link}\n              to = '/login'\n          />              \n          <Menu.Item\n            name='register'\n            active={activeItem === 'register'}\n            onClick={handleItemClick}\n            as = {Link}\n            to = '/register'\n          />\n        </Menu.Menu>\n      </Menu>\n    );\n        \n    return Menubar;\n}\nexport default MenuBar;\n","import React, { useContext } from 'react';\n\n\nimport {Route,Redirect} from 'react-router-dom';\nimport { AuthContext } from '../context/auth';\n\n\n\nconst AuthRoute = ({component:Component,...rest})=>{\n    const {user} = useContext(AuthContext);\n    return (\n        <Route\n            {...rest}\n            render={props => user ? <Redirect to=\"/\"/>:<Component {...props}/> }\n        />\n    )\n}\n\n\nexport default AuthRoute;","import React, { useContext, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Button, Card, Form, Grid,Icon,Image, Label, Placeholder, Popup, Segment } from 'semantic-ui-react';\nimport moment from 'moment';\nimport LikeButton from '../components/LikeButton';\nimport { AuthContext } from '../context/auth';\nimport DeletButton from '../components/DeletButton';\n\nfunction SinglePost(props) {\n    const {user} = useContext(AuthContext);\n    const postId  = props.match.params.postId;\n\n\n    const {data} = useQuery(FETCH_POST_QUERY,{\n        variables:{\n            postId\n        }\n    });\n    const [coment,setComent] = useState('');\n\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION,{\n        update(){\n            setComent('');\n        },\n        variables:{\n            postId,\n            body:coment\n        }\n    });\n    function deletePostCallback(){\n        props.history.push('/');\n    }\n    const getPost = data?.getPost;\n    let postMarkup;\n    if(!getPost){\n        postMarkup =    <Grid.Column>\n                            <Segment raised>\n                                <Placeholder>\n                                    <Placeholder.Header image>\n                                    <Placeholder.Line />\n                                    <Placeholder.Line />\n                                    </Placeholder.Header>\n                                    <Placeholder.Paragraph>\n                                    <Placeholder.Line length='medium'/>\n                                    <Placeholder.Line length='short' />\n                                    </Placeholder.Paragraph>\n                                </Placeholder>\n                            </Segment>\n                        </Grid.Column>\n    }\n    else{\n        const {id,body,createdAt,username,\n        comments,likes,likeCount,commentCount} = getPost;\n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width = {2}>\n                        <Image\n                            src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                            size=\"small\"\n                            float = \"right\"\n                    />\n                    </Grid.Column>\n                    <Grid.Column width = {10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header>\n                                    {username}\n                                </Card.Header>\n                                <Card.Meta>\n                                    {moment(createdAt).fromNow()}\n                                </Card.Meta>\n                                <Card.Description>\n                                    {body}\n                                </Card.Description> \n                            </Card.Content>\n                            <hr/>\n                            <Card.Content extra>\n                                <LikeButton user={user} post={{id,likes,likeCount}}/> \n                                <Popup content = \"Comment on post\"\n                                    inverted\n                                    trigger = {\n                                    <Button as =\"div\" labelPosition=\"right\"\n                                     onClick = {()=> console.log('comment on post')}   \n                                    >\n                                    \n                                    <Button basic color = \"teal\">\n                                        <Icon name = \"comments\"/>\n                                    </Button>\n                                    <Label basic color=\"blue\" pointing=\"left\">\n                                        {commentCount}\n                                    </Label>\n                                    </Button>\n                                    \n                                    }\n                                />\n                                {user && username && user?.username===username && (\n                                    <DeletButton postId = {id} callback = {deletePostCallback}/>\n                                )}\n                            </Card.Content>\n                        </Card>\n                        {user && (\n                            <Card fluid>\n                                <Card.Content>\n                                    <p>Post a comment...</p>\n                                    <Form>\n                                        <div class = \"ui action input fluid\">\n                                            <input type =\"text\"\n                                                placeholder=\"Comment..\"\n                                                name=\"comment\"\n                                                value = {coment}\n                                                onChange = {e => setComent(e.target.value)} \n                                            />\n                                            <button type = \"submit\" className = \"ui button teal\"\n                                                disabled = {coment.trim() === ''}\n                                                onClick = {submitComment}\n                                            ><strong style = {{color:\"white\"}}>Submit</strong></button>\n                                        </div>\n                                    </Form>    \n                                </Card.Content>\n                             </Card>\n                        )}\n                        {comments.map((comment) =>{\n                            return <Card fluid>\n                                <Card.Content>\n                                    {user && user.username === comment.username && (\n                                        <DeletButton postId= {id} commentId = {comment.id}/>\n                                    )}\n                                    <Card.Header>{comment.username}</Card.Header>\n                                    <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                                    <Card.Description>{comment.body}</Card.Description>\n                           </Card.Content>\n                            </Card> \n                        })}\n\n\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n\n    return postMarkup;\n}\n\n\nconst SUBMIT_COMMENT_MUTATION  = gql`\n    mutation($postId:ID!,$body:String!){\n        createComment(postId:$postId,body:$body){\n            id\n            comments{\n                id\n                body\n                createdAt\n                username\n            }\n            commentCount\n        }\n    }\n\n`;\n\n\nconst FETCH_POST_QUERY = gql`\n    query($postId:ID!){\n        getPost(postId:$postId){\n            id\n            body\n            createdAt\n            username\n            likeCount\n            likes{\n                username\n            }\n            commentCount\n            comments{\n                id\n                username\n                createdAt\n                body\n            }\n        }\n    }\n`;\n\nexport default SinglePost;\n","import 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport React from 'react';\nimport Login from './Pages/Login';\nimport Register from './Pages/Register';\nimport Home from './Pages/Home';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {Container} from 'semantic-ui-react';\nimport MenuBar from './components/MenuBar';\nimport {AuthProvider} from './context//auth';\nimport AuthRoute from './utils/authRoute';\nimport SinglePost from './Pages/SinglePost'\nfunction App() {\n  return (\n    <AuthProvider>\n          <Router>\n              <Container>\n                <MenuBar/>\n                <Route exact  path = \"/\" component = {Home}/>\n                <AuthRoute exact  path = '/login' component = {Login}/>\n                <AuthRoute exact  path ='/register' component = {Register}/>\n                <Route exact path=\"/posts/:postId\" component = {SinglePost}/>\n              </Container>\n          </Router>      \n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport App from './App';\nimport ApolloClient from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {createHttpLink} from 'apollo-link-http';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {setContext}  from 'apollo-link-context';\n\n\n\n\nconst httpLink = createHttpLink({\n    uri:'https://postgarm-26.herokuapp.com/'\n});\n\nconst authLink = setContext(()=>{\n    const token = localStorage.getItem('jwtToken');\n    console.log(token);\n    return {\n        headers:{\n            Authorization:(token)?`Bearer ${token}`: ''\n        }\n    }\n});\n\nconst client = new ApolloClient({\n    link:authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\n\n\nexport default(\n    <ApolloProvider client  = {client}>\n        <App/>\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './ApolloServer';\n\nReactDOM.render(ApolloProvider,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}